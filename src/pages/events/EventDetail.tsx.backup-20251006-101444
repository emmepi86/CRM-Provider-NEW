import React, { useEffect, useState } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { Calendar, MapPin, Users, Award, ArrowLeft, Trash2 } from 'lucide-react';
import { eventsAPI } from '../../api/events';
import { EnrollParticipantModal } from '../../components/EnrollParticipantModal';
import { enrollmentsAPI } from '../../api/enrollments';
import { Event, Enrollment } from '../../types';

export const EventDetail: React.FC = () => {
  const { id } = useParams<{ id: string }>();
  const navigate = useNavigate();
  const [event, setEvent] = useState<Event | null>(null);
  const [enrollments, setEnrollments] = useState<Enrollment[]>([]);
  const [loading, setLoading] = useState(true);
  const [loadingEnrollments, setLoadingEnrollments] = useState(false);
  const [showEnrollModal, setShowEnrollModal] = useState(false);

  useEffect(() => {
    if (id) {
      fetchEvent(parseInt(id));
      fetchEnrollments(parseInt(id));
    }
  }, [id]);

  const fetchEvent = async (eventId: number) => {
    try {
      setLoading(true);
      const data = await eventsAPI.getById(eventId);
      setEvent(data);
    } catch (error) {
      console.error('Errore caricamento evento:', error);
    } finally {
      setLoading(false);
    }
  };

  const fetchEnrollments = async (eventId: number) => {
    try {
      setLoadingEnrollments(true);
      const data = await enrollmentsAPI.listByEvent(eventId);
      setEnrollments(data.items);
    } catch (error) {
      console.error('Errore caricamento iscritti:', error);
    } finally {
      setLoadingEnrollments(false);
    }
  };

  const handleDeleteEnrollment = async (enrollmentId: number) => {
    if (!window.confirm('Sei sicuro di voler rimuovere questa iscrizione?')) {
      return;
    }

    try {
      await enrollmentsAPI.delete(enrollmentId);
      setEnrollments(enrollments.filter(e => e.id !== enrollmentId));
    } catch (error) {
      console.error('Errore eliminazione iscrizione:', error);
      alert('Errore durante la rimozione dell\'iscrizione');
    }
  };

  const getStatusBadge = (status: string) => {
    const colors = {
      draft: 'bg-gray-100 text-gray-800',
      published: 'bg-green-100 text-green-800',
      cancelled: 'bg-red-100 text-red-800',
      completed: 'bg-blue-100 text-blue-800',
    };
    return colors[status as keyof typeof colors] || 'bg-gray-100 text-gray-800';
  };

  const getTypeBadge = (type: string) => {
    return type === 'ecm' 
      ? 'bg-purple-100 text-purple-800' 
      : 'bg-orange-100 text-orange-800';
  };

  const getPaymentBadge = (status: string) => {
    const colors = {
      unpaid: 'bg-red-100 text-red-800',
      partial: 'bg-yellow-100 text-yellow-800',
      paid: 'bg-green-100 text-green-800',
      refunded: 'bg-gray-100 text-gray-800',
    };
    return colors[status as keyof typeof colors] || 'bg-gray-100 text-gray-800';
  };

  if (loading) {
    return (
      <div className="flex items-center justify-center h-64">
        <div className="text-gray-500">Caricamento evento...</div>
      </div>
    );
  }

  if (!event) {
    return (
      <div className="flex flex-col items-center justify-center h-64">
        <p className="text-gray-600 mb-4">Evento non trovato</p>
        <button
          onClick={() => navigate('/events')}
          className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700"
        >
          Torna agli eventi
        </button>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <button
          onClick={() => navigate('/events')}
          className="flex items-center space-x-2 text-gray-600 hover:text-gray-900"
        >
          <ArrowLeft size={20} />
          <span>Torna agli eventi</span>
        </button>
        <div className="flex items-center space-x-2">
          <span className={`px-3 py-1 rounded text-sm font-medium ${getTypeBadge(event.event_type)}`}>
            {event.event_type.toUpperCase()}
          </span>
          <span className={`px-3 py-1 rounded text-sm font-medium ${getStatusBadge(event.status)}`}>
            {event.status}
          </span>
        </div>
      </div>

      {/* Titolo e Info Principali */}
      <div className="bg-white rounded-lg shadow-md p-6">
        <h1 className="text-3xl font-bold text-gray-900 mb-6">{event.title}</h1>

        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          <div className="flex items-start space-x-3">
            <Calendar className="text-blue-600 mt-1" size={20} />
            <div>
              <p className="text-sm text-gray-600">Date</p>
              <p className="font-medium">
                {new Date(event.start_date).toLocaleDateString('it-IT', {
                  day: '2-digit',
                  month: 'long',
                  year: 'numeric'
                })}
                {' - '}
                {new Date(event.end_date).toLocaleDateString('it-IT', {
                  day: '2-digit',
                  month: 'long',
                  year: 'numeric'
                })}
              </p>
            </div>
          </div>

          {event.location && (
            <div className="flex items-start space-x-3">
              <MapPin className="text-blue-600 mt-1" size={20} />
              <div>
                <p className="text-sm text-gray-600">Luogo</p>
                <p className="font-medium">{event.location}</p>
              </div>
            </div>
          )}

          {event.max_participants && (
            <div className="flex items-start space-x-3">
              <Users className="text-blue-600 mt-1" size={20} />
              <div>
                <p className="text-sm text-gray-600">Posti disponibili</p>
                <p className="font-medium">
                  {enrollments.length} / {event.max_participants} iscritti
                </p>
              </div>
            </div>
          )}

          {event.credits && (
            <div className="flex items-start space-x-3">
              <Award className="text-blue-600 mt-1" size={20} />
              <div>
                <p className="text-sm text-gray-600">Crediti ECM</p>
                <p className="font-medium">{event.credits} crediti</p>
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Dettagli ECM */}
      {event.event_type === 'ecm' && (
        <div className="bg-white rounded-lg shadow-md p-6">
          <h2 className="text-xl font-semibold mb-4">Informazioni ECM</h2>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <p className="text-sm text-gray-600">Codice ECM</p>
              <p className="font-medium">{event.ecm_code || 'Non assegnato'}</p>
            </div>
            <div>
              <p className="text-sm text-gray-600">Crediti</p>
              <p className="font-medium">{event.ecm_credits || 'N/A'}</p>
            </div>
            {event.ecm_provider_code && (
              <div>
                <p className="text-sm text-gray-600">Codice Provider</p>
                <p className="font-medium">{event.ecm_provider_code}</p>
              </div>
            )}
          </div>
        </div>
      )}

      {/* Lista Iscritti */}
      <div className="bg-white rounded-lg shadow-md p-6">
        <div className="flex items-center justify-between mb-4">
          <h2 className="text-xl font-semibold">
            Iscritti ({enrollments.length})
          </h2>
          <button onClick={() => setShowEnrollModal(true)} className="px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 flex items-center space-x-2">
            <Users size={18} /><span>Aggiungi Iscritto</span>
          </button>
        </div>

        {loadingEnrollments ? (
          <p className="text-gray-500 text-center py-8">Caricamento iscritti...</p>
        ) : enrollments.length === 0 ? (
          <p className="text-gray-500 text-center py-8">Nessun iscritto per questo evento</p>
        ) : (
          <div className="overflow-x-auto">
            <table className="w-full">
              <thead>
                <tr className="border-b">
                  <th className="text-left py-3 px-4 font-semibold text-gray-700">Nome</th>
                  <th className="text-left py-3 px-4 font-semibold text-gray-700">Email</th>
                  <th className="text-left py-3 px-4 font-semibold text-gray-700">Stato</th>
                  <th className="text-left py-3 px-4 font-semibold text-gray-700">Pagamento</th>
                  <th className="text-left py-3 px-4 font-semibold text-gray-700">Data Iscrizione</th>
                  <th className="text-center py-3 px-4 font-semibold text-gray-700">Azioni</th>
                </tr>
              </thead>
              <tbody>
                {enrollments.map((enrollment) => (
                  <tr key={enrollment.id} className="border-b hover:bg-gray-50">
                    <td className="py-3 px-4">
                      {enrollment.participant ? 
                        `${enrollment.participant.first_name} ${enrollment.participant.last_name}` 
                        : 'N/A'}
                    </td>
                    <td className="py-3 px-4">
                      {enrollment.participant?.email || 'N/A'}
                    </td>
                    <td className="py-3 px-4">
                      <span className={`px-2 py-1 rounded text-xs font-medium ${getStatusBadge(enrollment.status)}`}>
                        {enrollment.status}
                      </span>
                    </td>
                    <td className="py-3 px-4">
                      <span className={`px-2 py-1 rounded text-xs font-medium ${getPaymentBadge(enrollment.payment_status)}`}>
                        {enrollment.payment_status}
                      </span>
                    </td>
                    <td className="py-3 px-4">
                      {new Date(enrollment.enrollment_date).toLocaleDateString('it-IT')}
                    </td>
                    <td className="py-3 px-4 text-center">
                      <button
                        onClick={() => handleDeleteEnrollment(enrollment.id)}
                        className="text-red-600 hover:text-red-800"
                        title="Rimuovi iscrizione"
                      >
                        <Trash2 size={18} />
                      </button>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        )}
      </div>

      {/* Modal Iscrizione */}
      {showEnrollModal && (
        <EnrollParticipantModal
          eventId={event.id}
          enrolledParticipantIds={enrollments.map(e => e.participant_id)}
          onClose={() => setShowEnrollModal(false)}
          onSuccess={() => {
            fetchEnrollments(event.id);
          }}
        />
      )}
    </div>
  );
};
